<?php
declare(strict_types=1);

namespace PrinsFrank\PdfParser\Document\Dictionary\DictionaryKey;

enum DictionaryKey: string
{
    case A = 'A';
    case AA = 'AA';
    case ACRO_FORM = 'AcroForm';
    case ANNOTS = 'Annots';
    case A_I_S = 'AIS';
    case ARTBOX = 'ArtBox';
    case ASCENT = 'Ascent';
    case AUTH_EVENT = 'AuthEvent';
    case AUTHOR = 'Author';
    case AVG_WIDTH = 'AvgWidth';
    case BASE_ENCODING = 'BaseEncoding';
    case BASE_FONT = 'BaseFont';
    case B_BOX = 'BBox';
    case BITS_PER_COMPONENT = 'BitsPerComponent';
    case BLEED_BOX = 'BleedBox';
    case B_M = 'BM';
    case BORDER = 'Border';
    case CAP_HEIGHT = 'CapHeight';
    case C = 'C';
    case C_O_ = 'CO_';
    case CA = 'CA';
    case CA_L = 'ca';
    case CF = 'CF';
    case CFM = 'CFM';
    case CHAR_SET = 'CharSet';
    case C_I_D_SET = 'CIDSet';
    case C_I_D_SYSTEM_INFO = 'CIDSystemInfo';
    case C_I_D_TO_G_I_D_MAP = 'CIDToGIDMap';
    case COLORS = 'Colors';
    case COLOR_SPACE = 'ColorSpace';
    case COLUMNS = 'Columns';
    case COLLECTION = 'Collection';
    case CONTENTS = 'Contents';
    case COUNT = 'Count';
    case CREATOR = 'Creator';
    case CREATION_DATE = 'CreationDate';
    case CROP_BOX = 'CropBox';
    case CS = 'Cs';
    case C_S = 'CS';
    case DECODE_PARAMS = 'DecodeParms';
    case DESCENT = 'Descent';
    case DESCENDANT_FONTS = 'DescendantFonts';
    case DESTS = 'Dests';
    case DIFFERENCES = 'Differences';
    case DIRECTION = 'Direction';
    case DOC_CHECKSUM = 'DocChecksum';
    case D_W = 'DW';
    case E = 'E';
    case EFF = 'EFF';
    case ENCODING = 'Encoding';
    case ENCRYPT_METADATA = 'EncryptMetadata';
    case ENCRYPTION = 'Encrypt';
    case EXTENDS = 'Extends';
    case EXTENSIONS = 'Extensions';
    case EXT_G_STATE = 'ExtGState';
    case F = 'F';
    case FILTER = 'Filter';
    case FIRST = 'First';
    case FIRST_CHAR = 'FirstChar';
    case FLAGS = 'Flags';
    case FONT = 'Font';
    case FONT_B_BOX = 'FontBBox';
    case FONT_DESCRIPTOR = 'FontDescriptor';
    case FONT_FAMILY = 'FontFamily';
    case FONT_FILE = 'FontFile';
    case FONT_NAME = 'FontName';
    case FONT_STRETCH = 'FontStretch';
    case FONT_WEIGHT = 'FontWeight';
    case FORM_TYPE = 'FormType';
    case GS = 'Gs';
    case G_S = 'GS';
    case GROUP = 'Group';
    case H = 'H';
    case HEIGHT = 'Height';
    case HELV = 'Helv';
    case I = 'I';
    case ID = 'ID';
    case IN_DESIGN = 'InDesign';
    case INTENT = 'Intent';
    case IM = 'Im';
    case IMAGE = 'Image';
    case IMAGE_B = 'ImageB';
    case IMAGE_C = 'ImageC';
    case IMAGE_I = 'ImageI';
    case INDEX = 'Index';
    case INFO = 'Info';
    case ITALIC_ANGLE = 'ItalicAngle';
    case K = 'K';
    case KEYWORDS = 'Keywords';
    case KIDS = 'Kids';
    case L = 'L';
    case LANG = 'Lang';
    case LAST_CHAR = 'LastChar';
    case LEGAL = 'Legal';
    case LEADING = 'Leading';
    case LENGTH = 'Length';
    case LINEARIZED = 'Linearized';
    case MATRIX = 'Matrix';
    case MEDIABOX = 'MediaBox';
    case MARKED = 'Marked';
    case MARK_INFO = 'MarkInfo';
    case MAX_WIDTH = 'MaxWidth';
    case METADATA = 'Metadata';
    case MOD_DATE = 'ModDate';
    case MISSING_WIDTH = 'MissingWidth';
    case N = 'N';
    case NAME = 'Name';
    case NAMES = 'Names';
    case NEEDS_RENDERING = 'NeedsRendering';
    case O = 'O';
    case OC_PROPERTIES = 'OCProperties';
    case OPEN_ACTION = 'OpenAction';
    case ORDERING = 'Ordering';
    case O_P = 'OP';
    case O_P_M = 'OPM';
    case OUTLINES = 'Outlines';
    case OUTPUT_INTENTS = 'OutputIntents';
    case P = 'P';
    case PAGE = 'Page';
    case PAGE_LABELS = 'PageLabels';
    case PAGE_LAYOUT = 'PageLayout';
    case PAGE_MODE = 'PageMode';
    case PAGES = 'Pages';
    case PARENT = 'Parent';
    case PDF = 'PDF';
    case PERMS = 'Perms';
    case PIECE_INFO = 'PieceInfo';
    case PREDICTOR = 'Predictor';
    case PREVIOUS = 'Prev';
    case PROCSET = 'ProcSet';
    case PRODUCER = 'Producer';
    case PTEX_FULL_BANNER = 'PTEX.Fullbanner';
    case R = 'R';
    case RECIPIENTS = 'Recipients';
    case RECT = 'Rect';
    case REGISTRY = 'Registry';
    case REQUIREMENTS = 'Requirements';
    case RESOURCES = 'Resources';
    case ROOT = 'Root';
    case ROTATE = 'Rotate';
    case S = 'S';
    case S_A = 'SA';
    case SHADING = 'Shading';
    case SIZE = 'Size';
    case S_M = 'SM';
    case S_MASK = 'SMask';
    case SPIDER_INFO = 'SpiderInfo';
    case STEM_H = 'StemH';
    case STEM_V = 'StemV';
    case STMF = 'StmF';
    case STRF = 'StrF';
    case STRUCT_PARENTS = 'StructParents';
    case STRUCT_TREE_ROOT = 'StructTreeRoot';
    case SUB_FILTER = 'SubFilter';
    case SUBJECT = 'Subject';
    case SUBTYPE = 'Subtype';
    case SUPPLEMENT = 'Supplement';
    case T = 'T';
    case TABS = 'Tabs';
    case TC = 'Tc';
    case TEXT = 'Text';
    case THREADS = 'Threads';
    case TITLE = 'Title';
    case T_P_L = 'TPL';
    case TO_UNICODE = 'ToUnicode';
    case TRAPPED = 'Trapped';
    case TYPE = 'Type';
    case U = 'U';
    case URI = 'URI';
    case V = 'V';
    case VERSION = 'Version';
    case VIEWER_PREFERENCES = 'ViewerPreferences';
    case W = 'W';
    case W_M = 'WM';
    case WIDTH = 'Width';
    case WIDTHS = 'Widths';
    case X_HEIGHT = 'XHeight';
    case X_OBJECT = 'XObject';
    case X_REF_STM = 'XRefStm';
    case X_Y_Z = 'XYZ';

    public static function tryFromKeyString(string $keyString): ?self
    {
        return self::tryFrom(rtrim(ltrim($keyString, '/'), "1234567890\n\t "));
    }
}
